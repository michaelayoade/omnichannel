name: Security & Code Quality

on:
  push:
    branches: [master, main]
  pull_request:
    branches: [master, main]
  schedule:
    # Run security scan weekly on Sunday at 1:00 AM
    - cron: '0 1 * * 0'

jobs:
  security-scan:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10']

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install bandit safety ruff mypy

    # Security scan with Bandit
    - name: Run Bandit security scan
      run: |
        bandit -r . --exclude .venv,migrations,tests,__pycache__ --severity high --confidence medium
      
    # Vulnerability scan with safety
    - name: Check for vulnerable dependencies
      run: |
        safety check -r requirements.txt --full-report

    # Code quality with Ruff
    - name: Run Ruff linter
      run: |
        ruff check .
      continue-on-error: true  # Don't fail build yet, just report issues

    # Type checking with MyPy
    - name: Run type checking
      run: |
        mypy --ignore-missing-imports .
      continue-on-error: true  # Don't fail build yet, just report issues

  tests:
    runs-on: ubuntu-latest
    needs: security-scan
    services:
      # Add Redis service for tests that require it
      redis:
        image: redis
        ports:
          - 6379:6379
        options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3

    strategy:
      matrix:
        python-version: ['3.10']

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-django

    # Run Django tests with coverage
    - name: Run tests with coverage
      run: |
        python -m pytest --cov=. --cov-report=xml
      env:
        # Use environment variables for database & cache configurations
        DJANGO_SETTINGS_MODULE: omnichannel_core.settings.test
        REDIS_URL: redis://localhost:6379/0
        SECRET_KEY: github-actions-test-key
        DEBUG: 'True'
        DATABASE_URL: sqlite:///github-actions-test.db

    # Upload coverage report
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false
