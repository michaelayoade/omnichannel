"""
Django settings for omnichannel_core project.

Generated by 'django-admin startproject' using Django 4.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import sys
from pathlib import Path

from decouple import config

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config(
    "SECRET_KEY",
    default="django-insecure-!)2-$jc@oxo=4tyv%*aavs$vq#$ccu4)5^1tav()suq2)cu)3=",
)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config("DEBUG", default=True, cast=bool)

ALLOWED_HOSTS = config(
    "ALLOWED_HOSTS",
    default="localhost,127.0.0.1",
    cast=lambda v: [s.strip() for s in v.split(",")],
)


# Application definition

INSTALLED_APPS = [
    "channels",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # Third party apps
    "rest_framework",
    "corsheaders",
    "django_extensions",
    "django_filters",
    "drf_spectacular",
    "django_cryptography",
    # Local apps
    "customers",
    "conversations",
    "email_integration",
    "agent_hub.apps.AgentHubConfig",
    "agents",
    "communication_channels.apps.CommunicationChannelsConfig",
    "splynx_sync",
    "whatsapp_integration",
    "facebook_integration",
]

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "omnichannel_core.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "omnichannel_core.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": config("DB_ENGINE", default="django.db.backends.sqlite3"),
        "NAME": config("DB_NAME", default=BASE_DIR / "db.sqlite3"),
        "USER": config("DB_USER", default=""),
        "PASSWORD": config("DB_PASSWORD", default=""),
        "HOST": config("DB_HOST", default=""),
        "PORT": config("DB_PORT", default=""),
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Authentication settings
LOGIN_REDIRECT_URL = "/api/agent_hub/dashboard/"
LOGOUT_REDIRECT_URL = "/accounts/login/"


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Channels
ASGI_APPLICATION = "omnichannel_core.asgi.application"
CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [config("REDIS_URL", default="redis://localhost:6379/1")],
        },
    },
}


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "static/"

STATICFILES_DIRS = [
    BASE_DIR / "assets",
]

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Django REST Framework
REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework.authentication.SessionAuthentication",
        "rest_framework.authentication.TokenAuthentication",
    ],
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAuthenticated",
    ],
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    "PAGE_SIZE": 20,
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
}

# CORS settings
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOWED_ORIGINS = config(
    "CORS_ALLOWED_ORIGINS",
    default="http://localhost:3000,http://127.0.0.1:3000,http://localhost:5173,http://localhost:5175",
    cast=lambda v: [s.strip() for s in v.split(",")],
)
# Must be False when credentials are true
CORS_ALLOW_ALL_ORIGINS = config("CORS_ALLOW_ALL_ORIGINS", default=False, cast=bool)

# Channels
ASGI_APPLICATION = "omnichannel_core.asgi.application"

# Use in-memory channel layer for testing to avoid Redis dependency
if "test" in sys.argv:
    CHANNEL_LAYERS = {
        "default": {
            "BACKEND": "channels.layers.InMemoryChannelLayer",
        },
    }
else:
    CHANNEL_LAYERS = {
        "default": {
            "BACKEND": "channels_redis.core.RedisChannelLayer",
            "CONFIG": {
                "hosts": [config("REDIS_URL", default="redis://127.0.0.1:6379")],
            },
        },
    }

# Celery Configuration
CELERY_BROKER_URL = config("CELERY_BROKER_URL", default="redis://localhost:6379/0")
CELERY_RESULT_BACKEND = config(
    "CELERY_RESULT_BACKEND", default="redis://localhost:6379/0"
)
CELERY_ACCEPT_CONTENT = ["json"]
CELERY_TASK_SERIALIZER = "json"
CELERY_RESULT_SERIALIZER = "json"
CELERY_TIMEZONE = "UTC"

# Field Encryption
# To generate a new key, run:
# from cryptography.fernet import Fernet
# Fernet.generate_key().decode()
FIELD_ENCRYPTION_KEY = config(
    "FIELD_ENCRYPTION_KEY", default="T6u_w-OnGv0_z-v2_A-Zg3p_y-q_x-r_S-t_U-v_W-x_Y-z="
)

from agent_hub.celery_beat import CELERY_BEAT_SCHEDULE as agent_hub_schedule

# Celery Beat Schedule
from email_integration.celery_beat import (
    CELERY_BEAT_SCHEDULE as email_integration_schedule,
)

CELERY_BEAT_SCHEDULE = {}
CELERY_BEAT_SCHEDULE.update(email_integration_schedule)
CELERY_BEAT_SCHEDULE.update(agent_hub_schedule)

# Splynx Integration Settings
SPLYNX_API_URL = config("SPLYNX_API_URL", default="")
SPLYNX_API_KEY = config("SPLYNX_API_KEY", default="")
SPLYNX_API_SECRET = config("SPLYNX_API_SECRET", default="")

# Static files configuration
STATIC_ROOT = BASE_DIR / "staticfiles"
STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

# Media files
MEDIA_URL = "/media/"
MEDIA_ROOT = BASE_DIR / "media"

# Spectacular settings
SPECTACULAR_SETTINGS = {
    "TITLE": "Omnichannel Communication API",
    "DESCRIPTION": "API for omnichannel communication with Splynx integration",
    "VERSION": "1.0.0",
    "SERVE_INCLUDE_SCHEMA": False,
}

# Logging
LOGS_DIR = BASE_DIR / "logs"
LOGS_DIR.mkdir(parents=True, exist_ok=True)

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {"format": "%(asctime)s [%(levelname)s] %(name)s: %(message)s"},
        "structured": {"format": "%(asctime)s [%(levelname)s] %(name)s: %(message)s"},
    },
    "filters": {
        "require_debug_false": {
            "()": "django.utils.log.RequireDebugFalse",
        },
        "require_debug_true": {
            "()": "django.utils.log.RequireDebugTrue",
        },
    },
    "handlers": {
        "file": {
            "level": "INFO",
            "class": "logging.FileHandler",
            "filename": LOGS_DIR / "django.log",
            "formatter": "structured",
        },
        "console": {
            "level": "INFO",
            "class": "logging.StreamHandler",
            "formatter": "structured",
        },
        "mail_admins": {
            "level": "ERROR",
            "filters": ["require_debug_false"],
            "class": "django.utils.log.AdminEmailHandler",
            "formatter": "verbose",
        },
    },
    "loggers": {
        "django": {
            "handlers": ["console", "file"],
            "level": "INFO",
            "propagate": False,
        },
        "django.request": {
            "handlers": ["mail_admins", "console", "file"],
            "level": "ERROR",
            "propagate": False,
        },
        "email_integration": {
            "handlers": ["console", "file"],
            "level": "INFO",
            "propagate": False,
        },
        "agent_hub": {
            "handlers": ["console", "file"],
            "level": "INFO",
            "propagate": False,
        },
        "whatsapp_integration": {
            "handlers": ["console", "file"],
            "level": "INFO",
            "propagate": False,
        },
    },
    "root": {
        "handlers": ["console", "file"],
        "level": "INFO",
    },
}

# WhatsApp Integration Settings
WHATSAPP_AUTO_MARK_READ = config("WHATSAPP_AUTO_MARK_READ", default=False, cast=bool)
WHATSAPP_MEDIA_STORAGE_PATH = "whatsapp/media/"
WHATSAPP_DEFAULT_COUNTRY_CODE = config("WHATSAPP_DEFAULT_COUNTRY_CODE", default="1")

# Update requirements.txt dependencies
WHATSAPP_REQUIRED_PACKAGES = [
    "requests>=2.31.0",
    "Pillow>=10.1.0",
    "celery>=5.3.4",
    "phonenumbers>=8.13.0",  # For advanced phone validation
]

# Email Integration Settings
EMAIL_RETENTION_DAYS = config("EMAIL_RETENTION_DAYS", default=365, cast=int)
EMAIL_MAX_ATTACHMENT_SIZE = config(
    "EMAIL_MAX_ATTACHMENT_SIZE", default=25 * 1024 * 1024, cast=int
)  # 25MB
EMAIL_ATTACHMENT_STORAGE_PATH = "email/attachments/"
EMAIL_DEFAULT_POLL_FREQUENCY = config(
    "EMAIL_DEFAULT_POLL_FREQUENCY", default=300, cast=int
)  # 5 minutes
EMAIL_MAX_RETRY_ATTEMPTS = config("EMAIL_MAX_RETRY_ATTEMPTS", default=3, cast=int)

# Email required packages
EMAIL_REQUIRED_PACKAGES = [
    "celery>=5.3.4",
    "redis>=5.0.0",
    "email-validator>=2.0.0",
]

# Facebook Messenger Integration Settings
FACEBOOK_WEBHOOK_VERIFY_TOKEN = config("FACEBOOK_WEBHOOK_VERIFY_TOKEN", default="")
FACEBOOK_APP_SECRET = config("FACEBOOK_APP_SECRET", default="")
FACEBOOK_MAX_MESSAGE_RETRY = config("FACEBOOK_MAX_MESSAGE_RETRY", default=3, cast=int)
FACEBOOK_RATE_LIMIT_PER_HOUR = config(
    "FACEBOOK_RATE_LIMIT_PER_HOUR", default=1000, cast=int
)
FACEBOOK_MEDIA_STORAGE_PATH = "facebook/media/"

# Facebook required packages
FACEBOOK_REQUIRED_PACKAGES = [
    "requests>=2.31.0",
    "celery>=5.3.4",
]
